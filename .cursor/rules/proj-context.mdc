---
description:
globs:
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Resume Tailoring Application Context

## Overview

This is an AI-powered resume tailoring tool that analyzes job postings and optimizes resumes to match job requirements using LLM technology (Claude/OpenAI). The application helps job seekers create targeted resumes for specific job listings.

## Core Functionality

1. **Resume Parsing**: Upload and extract sections from DOCX format resumes
2. **Job Analysis**: Parse job listings from URLs and analyze requirements 
3. **AI Tailoring**: Use LLM technology to customize resume content for specific jobs
4. **Output Generation**: Generate professionally formatted, tailored PDF documents

## Key Components

- **Flask Backend**: Handles file processing, API calls, and business logic
- **Simple Frontend**: HTML/CSS/JS interface for uploading resumes and job listings
- **LLM Integration**: Uses Claude and OpenAI for resume parsing, job analysis, and tailoring
- **PDF Generation**: Creates professionally formatted PDF documents for download

## Recent Changes

- Switched from Word document generation to PDF export for better consistency
- Implemented HTML-to-PDF conversion with professional styling
- Enhanced resume formatting with standard dot bullets and improved spacing
- Added horizontal line under contact information
- Removed markdown bold formatting from content

## Technical Decisions

### PDF Export Implementation

We've chosen to implement PDF export instead of Word document generation for several key reasons:

1. **Consistent Appearance**: PDFs render consistently across all platforms and devices, while Word documents may vary based on the version of Office or other factors.

2. **Simplified Workflow**: Using a single HTML-to-PDF pipeline is more maintainable than juggling both HTML and Word formatting systems.

3. **ATS Compatibility**: PDFs are widely accepted by Applicant Tracking Systems and are the standard format for job applications.

4. **Reduced Complexity**: HTML/CSS to PDF conversion is more reliable and predictable than programmatic Word document manipulation.

5. **Professional Output**: PDF format provides a more polished, finished document appropriate for formal job applications.

Implementation approach:
- Use WeasyPrint or wkhtmltopdf for HTML-to-PDF conversion
- Leverage existing HTML preview CSS for PDF styling
- Ensure proper page breaks and section formatting
- Include metadata and optimal settings for ATS compatibility

## File Structure Overview

- `app.py`: Main Flask application
- `resume_processor.py`: Handles resume parsing and processing
- `job_parser.py`: Extracts and analyzes job requirements
- `llm_resume_parser.py`: Uses LLM to parse resume sections
- `llm_job_analyzer.py`: Uses LLM to analyze job postings
- `pdf_exporter.py`: Converts HTML to PDF for download
- `tailoring_handler.py`: Manages the resume tailoring process
- `claude_integration.py`: Integrates with LLM APIs
- `static/css/styles.css`: Main stylesheet for UI and PDF styling
- `templates/`: HTML templates for the web interface
