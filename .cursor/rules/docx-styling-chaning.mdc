---
description: 
globs: 
alwaysApply: true
---
---
description: DOCX styling playbook for Resume-Tailor - prevents three-layer styling conflicts
globs: ["**/*.py", "**/*.json", "design_tokens.json", "style_engine.py", "utils/docx_builder.py", "word_styles/*.py"]
alwaysApply: false
---

# Cursor Project Rules - Resume Tailor DOCX Styling

## üéØ **Critical DOCX Styling Rules**

### **1. Style Precedence Hierarchy - NEVER VIOLATE**
```
Direct ¬∂ formatting ‚ñ∂ Paragraph style ‚ñ∂ Linked character style ‚ñ∂ Document defaults
```
- **RULE**: Never apply direct formatting (`paragraph_format.space_before = Pt(6)`) after assigning a style
- **WHY**: Direct formatting always wins, creating race conditions and inconsistent spacing
- **DO**: Set paragraph properties via style definitions in `StyleEngine.create_docx_custom_styles()`
- **DON'T**: Mix direct formatting with style assignment

### **2. Content-First Architecture - MANDATORY**
- **RULE**: Always add content (`paragraph.add_run(text)`) BEFORE applying styles  
- **WHY**: Word ignores style assignments on empty paragraphs, falls back to "Normal" style
- **PATTERN**: 
  ```python
  para = doc.add_paragraph()
  para.add_run(text)  # ‚Üê MUST come first
  para.style = 'MR_Company'  # ‚Üê Only after content exists
  ```
- **ANTI-PATTERN**:
  ```python
  para = doc.add_paragraph()
  para.style = 'MR_Company'  # ‚Üê FAILS silently, no runs exist
  para.add_run(text)
  ```

### **3. Design Token Hierarchy - SINGLE SOURCE OF TRUTH**
- **RULE**: All styling values MUST come from `design_tokens.json` ‚Üí `_docx_styles.json` ‚Üí `StyleEngine`
- **LAYERS**:
  1. `design_tokens.json` - Source of truth values
  2. `StyleEngine.create_docx_custom_styles()` - Applies tokens to Word styles
  3. `_apply_paragraph_style()` - Uses pre-created styles only
- **DON'T**: Hardcode values in multiple places (creates inconsistency)
- **DO**: Change values only in design tokens, regenerate with `python tools/generate_tokens.py`

### **4. Style Creation Idempotency - REQUIRED**
- **RULE**: Style creation must be idempotent (safe to call multiple times)
- **PATTERN**: Use "get-or-create-then-configure" approach
- **IMPLEMENTATION**:
  ```python
  try:
      style = doc.styles['MR_Company']  # Try to get existing
  except KeyError:
      style = doc.styles.add_style('MR_Company', WD_STYLE_TYPE.PARAGRAPH)  # Create if missing
  # Always configure regardless of whether created or retrieved
  style.paragraph_format.space_before = Pt(config['spaceBeforePt'])
  ```

### **5. Style Application Rules - STRICT SEPARATION**
- **RULE**: Keep style definition separate from style application
- **DEFINITION**: Only in `StyleEngine.create_docx_custom_styles()` 
- **APPLICATION**: Only in `_apply_paragraph_style()` or direct assignment
- **DON'T**: Modify paragraph formatting after style assignment
- **EXCEPTION**: Only apply direct formatting BEFORE style assignment if absolutely necessary

### **6. Bullet Point Architecture - NATIVE ONLY**
- **RULE**: Use Word's native numbering system, never manual bullets
- **IMPLEMENTATION**: `NumberingEngine.apply_native_bullet()` with XML numbering definitions
- **DON'T**: Use `"‚Ä¢ " + text` with manual indentation (overrides native spacing)
- **DO**: Create proper `<w:abstractNum>` and `<w:num>` definitions
- **INDENTATION**: Controlled by design tokens, applied via XML `<w:ind>` elements

### **7. Logging Requirements - MANDATORY FOR DEBUGGING**
- **RULE**: Log style assignments and spacing values during debugging
- **PATTERN**:
  ```python
  para.style = style_name
  logger.info(f"Applied style '{style_name}' to paragraph: '{para.text[:50]}...'")
  logger.info(f"Space before: {para.paragraph_format.space_before}")
  logger.info(f"Space after: {para.paragraph_format.space_after}")
  ```
- **PURPOSE**: Detect direct formatting overrides and style application failures

### **8. MR_Company Style Special Handling**
- **RULE**: MR_Company spacing must respect design tokens (`paragraph-spacing-company-before`)
- **DON'T**: Hardcode `space_before = Pt(0)` in StyleEngine
- **DON'T**: Apply direct spacing overrides in docx_builder
- **DO**: Let design tokens control all MR_Company spacing values
- **XML**: Use contextual spacing controls for advanced behavior, never for basic spacing

### **9. Token Generation Pipeline - CRITICAL LAYER**
- **RULE**: `tools/generate_tokens.py` MUST use design tokens for ALL style properties
- **WHY**: Token generator is part of the styling pipeline and can create hardcoded conflicts
- **DO**: Load design tokens and use variables: `roledesc_indent = float(design_tokens.get("docx-role-description-indent-cm", "0.254"))`
- **DON'T**: Hardcode style properties: `"italic": True` or `"indentCm": 0.0`
- **DANGER**: Token generator hardcodes override design tokens silently
- **LESSON LEARNED**: Even token generation can create conflicts if not properly design-token-driven

## üö® **Anti-Patterns - NEVER DO THESE**

### **Race Condition Creators**
```python
# ‚ùå BAD: Direct formatting after style
para.style = 'MR_Company' 
para.paragraph_format.space_before = Pt(6)  # Overrides style!

# ‚ùå BAD: Style on empty paragraph  
para = doc.add_paragraph()
para.style = 'MR_Company'  # Silently fails
para.add_run(text)

# ‚ùå BAD: Multiple hardcoded values
# In design_tokens.json: "paragraph-spacing-company-before": "6"
# In style_engine.py: pf.space_before = Pt(0)  # Conflicts!
# In docx_builder.py: para.paragraph_format.space_before = Pt(6)  # Race condition!
```

### **Hardcoded Value Violations**
```python
# ‚ùå BAD: Magic numbers
indent_xml = f'<w:ind w:left="221" w:hanging="221"/>'

# ‚úÖ GOOD: Design token driven
left_indent_cm = float(design_tokens.get("docx-bullet-left-indent-cm", "0.965"))
left_indent_twips = int(left_indent_cm * 567)
indent_xml = f'<w:ind w:left="{left_indent_twips}" w:hanging="{hanging_indent_twips}"/>'
```

### **Token Generator Hardcode Violations**
```python
# ‚ùå BAD: Hardcoded properties in token generator
"MR_RoleDescription": {
    "italic": True,  # Should be "bold": True from design evaluation
    "indentCm": 0.0  # Should use design token "docx-role-description-indent-cm"
}

# ‚úÖ GOOD: Design token driven generator
roledesc_indent = float(design_tokens.get("docx-role-description-indent-cm", "0.254"))
"MR_RoleDescription": {
    "bold": True,  # Matches intended design
    "indentCm": roledesc_indent  # Uses design token
}
```

## ‚úÖ **Correct Patterns - ALWAYS DO THESE**

### **Content-First Style Application**
```python
# ‚úÖ CORRECT: Content first, then style
para = doc.add_paragraph()
para.add_run(text)  # Content must exist first
_apply_paragraph_style(doc, para, "MR_Company", docx_styles)  # Style application
```

### **Design Token Integration**
```python
# ‚úÖ CORRECT: Single source of truth
design_tokens = StyleEngine.load_tokens()
docx_styles = StyleEngine.create_docx_custom_styles(doc, design_tokens)
# All styling now controlled by design_tokens.json
```

### **Debugging Pattern**
```python
# ‚úÖ CORRECT: Comprehensive logging
logger.info(f"Before style: {para.style.name if para.style else 'None'}")
para.style = style_name
logger.info(f"After style: {para.style.name if para.style else 'None'}")
logger.info(f"Final spacing: before={para.paragraph_format.space_before}, after={para.paragraph_format.space_after}")
```

### **Token Generator Design Token Usage**
```python
# ‚úÖ CORRECT: Load design tokens in generator
with open('design_tokens.json', 'r') as f:
    design_tokens = json.load(f)

# ‚úÖ CORRECT: Use design token variables
roledesc_indent = float(design_tokens.get("docx-role-description-indent-cm", "0.254"))
company_spacing = design_tokens.get("paragraph-spacing-company-before", "6")

# ‚úÖ CORRECT: Apply in style definitions
"MR_RoleDescription": {
    "bold": True,
    "indentCm": roledesc_indent
}
```

## üîß **File-Specific Rules**

### **`design_tokens.json`**
- ‚úÖ ONLY place for spacing/sizing values
- ‚úÖ Use consistent naming: `paragraph-spacing-{style}-{before|after}`
- ‚ùå NEVER hardcode values elsewhere

### **`tools/generate_tokens.py`** ‚ö†Ô∏è **NEWLY CRITICAL**
- ‚úÖ MUST load and use design tokens for ALL style properties
- ‚úÖ Use design token variables instead of hardcoded values
- ‚úÖ Maintain design token hierarchy: design_tokens.json ‚Üí generate_tokens.py ‚Üí _docx_styles.json
- ‚ùå NEVER hardcode style properties like `"italic": True` or `"indentCm": 0.0`
- ‚ùå NEVER bypass design token system in token generation
- **LESSON**: Token generator is part of the styling pipeline and must respect design tokens

### **`style_engine.py`** 
- ‚úÖ ONLY place for style creation and configuration
- ‚úÖ Apply ALL design token values including MR_Company spacing
- ‚ùå NEVER hardcode spacing values
- ‚ùå NEVER exclude styles from design token application

### **`utils/docx_builder.py`**
- ‚úÖ ONLY place for style application and content creation
- ‚úÖ Content-first: add_run() before style assignment
- ‚ùå NEVER apply direct formatting after style assignment
- ‚ùå NEVER hardcode spacing overrides

### **`word_styles/numbering_engine.py`**
- ‚úÖ ONLY place for native Word numbering XML generation
- ‚úÖ Use design tokens for all indentation values  
- ‚ùå NEVER hardcode XML attribute values
- ‚ùå NEVER mix manual bullets with native numbering

### **`resume_styler.py`**
- ‚úÖ Load design tokens and use StyleEngine.hex_to_rgb() for colors
- ‚úÖ Use design token spacing values with proper Pt() conversion
- ‚ùå NEVER hardcode RGBColor() values or Pt() spacing
- ‚ùå NEVER bypass design token color/spacing system

## üéØ **Testing Requirements**

### **Before Any Style Changes**
1. **Run**: `python tools/generate_tokens.py` after design token changes
2. **Verify**: `_docx_styles.json` reflects your changes
3. **Test**: Create minimal document to verify style application
4. **Log**: Enable verbose logging to trace style application flow

### **Token Generator Validation**
- ‚úÖ Verify generated _docx_styles.json matches design tokens
- ‚úÖ Check that style properties use design token values, not hardcoded
- ‚úÖ Test visual output matches intended design (bold vs italic, correct indentation)
- ‚ùå Never assume token generator is conflict-free without verification

### **Regression Prevention**
- ‚úÖ Test multiple entries of same style (company, school, etc.)
- ‚úÖ Verify consistent spacing across all instances  
- ‚úÖ Check Word style inspector for actual applied values
- ‚ùå Never commit changes without testing consistency

---

## üèÜ **Design Token Alignment Success Story**

In January 2025, a comprehensive audit eliminated 23+ hardcoded styling conflicts across 8 files. Key discoveries:

**4-Layer Pipeline Established**:
```
design_tokens.json ‚Üí tools/generate_tokens.py ‚Üí _docx_styles.json ‚Üí Application Code
```

**Critical Fix**: `tools/generate_tokens.py` was found to contain hardcoded conflicts that overrode design tokens:
- `"italic": True` instead of `"bold": True` 
- `"indentCm": 0.0` instead of using design token `"docx-role-description-indent-cm": "0.254"`

**Lesson**: Even the token generation layer must respect design tokens. Any hardcoded values anywhere in the pipeline can create conflicts.

**Result**: 100% design token control, predictable styling, single source of truth.

---




*These rules prevent the four-layer styling conflicts that cause spacing inconsistencies and ensure maintainable, predictable DOCX generation.* 