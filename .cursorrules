# Resume Tailoring Website Using LLM Technology

## Project Overview
This application helps users tailor their resumes to match specific job listings using Claude AI. The application analyzes job postings, extracts requirements, and optimizes the resume accordingly.

## Files and Structure
- **app.py**: Main Flask application entrypoint
- **config.py**: Configuration settings (API keys, upload paths)
- **upload_handler.py**: Handles resume file uploads
- **resume_processor.py**: Processes and analyzes uploaded resumes
- **resume_formatter.py**: Formats resumes into a standardized structure
- **job_parser.py**: Parses job listings from URLs (LinkedIn and generic)
- **claude_integration.py**: Interfaces with Claude AI for resume tailoring
- **tailoring_handler.py**: Orchestrates the tailoring process
- **format_handler.py**: API routes for resume formatting
- **job_parser_handler.py**: API routes for job parsing
- **static/css/styles.css**: Styling for the application
- **static/js/main.js**: Frontend JavaScript
- **templates/index.html**: Main HTML interface
- **static/uploads/**: Stores uploaded and processed files

## Input/Output Flow
1. **Input**: User uploads DOCX resume and provides job listing URL
2. **Processing**: 
   - Resume is formatted into standardized structure
   - Job listing is parsed to extract requirements and skills
   - Claude AI tailors resume content to match job requirements
3. **Output**: Tailored resume available for download as DOCX

## Fixes Applied
1. Added proper secret key for Flask app security
2. Created correct folder structure for Flask app (templates/, static/)
3. Fixed template_resume.docx path issue by copying to static/uploads directory
4. Fixed 'summary' KeyError by properly initializing empty sections
5. Enhanced section handling to properly check for empty content before processing
6. Fixed regex character range error in job_parser.py that was causing LinkedIn job parsing to fail
7. Fixed demo mode vs. API mode by ensuring the Claude API key is properly configured
8. Added .env and sensitive files to .gitignore to prevent exposing API keys
9. Improved UI layout by aligning "User Resume Parsed" and "Job Requirements" panels side by side
10. Made HTTP/HTTPS dynamic based on certificate availability
11. Ensured proper dependency installation for PDF and DOCX processing
12. Significantly improved job parsing to capture "About the job" and all relevant sections
13. Enhanced section detection in job listings using advanced pattern matching
14. Fixed Claude API integration to properly use official Anthropic SDK
15. Removed demo mode fallback to ensure consistent API usage and testing

## Job Parser Improvements
- Added comprehensive section extraction for LinkedIn and generic job postings
- Created intelligent section detection system to capture all major sections ("About the job", "Requirements", etc.)
- Improved bullet point extraction with support for various formats and symbols
- Enhanced skills detection with expanded vocabulary including modern AI/ML skills
- Structured response to include full sections alongside extracted requirements
- Added special handling for "About the job" section to ensure it's always captured

## Claude API Integration Fixes
- Switched from direct HTTP requests to official Anthropic Python SDK
- Added robust error handling and logging of API calls
- Improved environment variable handling to prevent API key issues
- Created more effective prompting for bold, significant changes in tailored content
- Fixed serialization issues when handling Claude API responses

## UI Improvements
- Reorganized the layout to show the "User Resume Parsed" and "Job Requirements" panels side by side in a dedicated row
- Enhanced card styling for consistent heights and better visual alignment
- Ensured responsive design for mobile devices
- Added proper scrolling behavior for content overflow
- Maintained the original step-based workflow with clear visual separation

## Latest Status
- Application is successfully parsing LinkedIn job listings with comprehensive section extraction
- Claude API integration is properly configured and working for resume tailoring
- Job parser now captures the complete job description including "About the job" sections
- Resume preview shows the Claude AI tailored content with significant improvements
- All known blocking issues have been resolved and the application is functioning as expected

## Environment
- Python 3.x
- Flask web framework
- Claude API (via official Anthropic SDK) for AI-based resume tailoring
- Required packages in requirements.txt

## Setup Notes
- Requires Claude API key in .env file
- Flask SECRET_KEY must be set in .env
- Run with `python app.py`
- Accessible at http://localhost:5000 or https://localhost:5000 if certificates are available
- Required dependencies: flask, python-dotenv, requests, beautifulsoup4, python-docx, werkzeug, docx2txt, PyPDF2, pdfminer.six, flask-cors, anthropic 

# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## Project-Specific Lessons
- Always ensure Claude API Key is properly configured in .env file
- Use official Anthropic SDK for Claude API integration
- When parsing job listings, use comprehensive section detection to capture all relevant sections
- Initialize empty sections in resume data structures to avoid KeyError
- For regex patterns in job_parser.py, ensure proper escaping of special characters
- When generating resume previews, properly handle bullet points (â€¢, -, *) for better formatting
- Log the actual Claude API responses for debugging and transparency
- When creating DOCX documents, use correct paragraph styles (Heading 1, Heading 2, List Bullet) for proper formatting
- In generate_resume_preview function, check for bullet point markers and create proper HTML list elements
- Ensure the proper use of section headers in the document to create well-structured resumes
- When testing API functionality, create standalone test scripts that can verify each part of the workflow
- Split document creation from content tailoring for cleaner code organization

## User Specified Lessons
- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When working with PowerShell on Windows, use `;` instead of `&&` for command chaining
- For parsing HTML content in resumes, pay attention to nested elements and formatting
- When importing Python modules from external sources, ensure they're properly installed in the environment
- Check for WD_ALIGN_PARAGRAPH usage from docx library for document formatting

# Scratchpad 

## Resume Tailoring Improvements - April 13, 2025

[X] Integrate devin.cursorrules repository
  - Cloned repository into devin/ folder
  - Copied tools directory and its scripts
  - Updated .cursorrules file with combined content
  - Added dependencies to requirements.txt
  - Updated .env file with new API keys

[X] Fix resume preview issues
  - Improved document structure in DOCX generation
  - Enhanced HTML preview rendering 
  - Added proper formatting for bullet points
  - Created proper section headers

[X] Add Claude API logging
  - Now storing complete API responses
  - Added request/response data with timestamps
  - Included token usage statistics

[X] Create test scripts
  - Direct Claude API testing
  - End-to-end workflow testing
  - HTML preview testing
  - HTTP API testing

[X] Document progress and lessons learned
  - Updated .cursorrules with new lessons
  - Created commit message
  - Added detailed Scratchpad notes

Next steps:
- Consider refining UI to better display tailored sections
- Add option to see "diff" between original and tailored resume
- Explore using other LLMs from devin tools as fallbacks
- Consider adding job search functionality using the new search engine tools