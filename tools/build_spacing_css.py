#!/usr/bin/env python3

import json
import sys
from pathlib import Path

# Add parent directory to path to import translator
sys.path.append(str(Path(__file__).parent.parent))

from rendering.compat.translator import translate
from static.css.raw_rules import RAW_RULES

def load_design_tokens():
    """Load design tokens from JSON file"""
    with open('design_tokens.json', 'r') as f:
        return json.load(f)

def generate_spacing_css_with_layer(spacing_rules, target_engine="browser"):
    """Generate spacing CSS wrapped in @layer for cascade protection"""
    
    # Translate rules for target engine
    translated_rules = translate(spacing_rules, target_engine)
    
    css_rules = []
    for selector, properties in translated_rules.items():
        if not properties:
            continue
            
        rule = f"  {selector} {{"
        for prop, value in properties.items():
            rule += f"\n    {prop}: {value};"
        rule += "\n  }"
        css_rules.append(rule)
    
    # Wrap in @layer spacing for cascade protection
    layer_css = f"""/* Enhanced Spacing Rules - Generated by Translator */
/* DO NOT EDIT MANUALLY - Use design_tokens.json */

@layer spacing {{
{chr(10).join(css_rules)}
}}"""
    
    return layer_css

def generate_legacy_spacing_css(spacing_rules, target_engine="browser"):
    """Generate spacing CSS without @layer for old browsers"""
    
    # Translate rules for target engine  
    translated_rules = translate(spacing_rules, target_engine)
    
    css_rules = []
    for selector, properties in translated_rules.items():
        if not properties:
            continue
            
        rule = f"{selector} {{"
        for prop, value in properties.items():
            rule += f"\n  {prop}: {value};"
        rule += "\n}"
        css_rules.append(rule)
    
    # No @layer wrapper for legacy browsers
    legacy_css = f"""/* Enhanced Spacing Rules - Legacy Browser Version */
/* DO NOT EDIT MANUALLY - Use design_tokens.json */

{chr(10).join(css_rules)}"""
    
    return legacy_css

def validate_css_output(css_content, min_size=100):
    """Basic validation that CSS was generated properly"""
    if len(css_content) < min_size:
        raise ValueError(f"Generated CSS too small ({len(css_content)} chars) - likely generation failed")
    
    # Check that CSS has either layer protection OR legacy marker (not both required)
    has_layer = '@layer spacing' in css_content
    has_legacy_marker = 'Legacy Browser Version' in css_content  # Check for substring
    
    print(f"üîç Validation: has_layer={has_layer}, has_legacy_marker={has_legacy_marker}")
    
    if not has_layer and not has_legacy_marker:
        print(f"üîç CSS content start: {repr(css_content[:300])}")
        raise ValueError("CSS missing layer protection or legacy marker")
    
    # Check for critical selectors
    critical_selectors = ['.role-description-text', '.section-box', '.position-bar']
    missing_selectors = []
    for selector in critical_selectors:
        if selector not in css_content:
            missing_selectors.append(selector)
    
    if missing_selectors:
        print(f"‚ö†Ô∏è Warning: Critical selectors not found: {', '.join(missing_selectors)}")
    
    return True

def main():
    print("üéØ Building separate spacing CSS with cascade protection...")
    
    try:
        # Load design tokens
        tokens = load_design_tokens()
        print(f"üìä Loaded {len(tokens)} design tokens")
        
        # Use existing RAW_RULES from translator
        spacing_rules = RAW_RULES
        print(f"üîß Processing {len(spacing_rules)} spacing rules")
        
        # Generate browser CSS with @layer protection
        browser_css = generate_spacing_css_with_layer(spacing_rules, "browser")
        print(f"üîç Browser CSS preview (first 200 chars): {browser_css[:200]}...")
        validate_css_output(browser_css)
        
        # Generate WeasyPrint CSS with @layer protection
        weasyprint_css = generate_spacing_css_with_layer(spacing_rules, "weasyprint")
        validate_css_output(weasyprint_css)
        
        # Generate legacy versions without @layer
        browser_legacy_css = generate_legacy_spacing_css(spacing_rules, "browser")
        print(f"üîç Legacy CSS preview (first 200 chars): {browser_legacy_css[:200]}...")
        validate_css_output(browser_legacy_css)
        
        # Write CSS files
        Path("static/css/spacing.css").write_text(browser_css)
        Path("static/css/spacing_print.css").write_text(weasyprint_css)
        Path("static/css/spacing.legacy.css").write_text(browser_legacy_css)
        
        # Statistics
        print(f"‚úÖ Generated spacing CSS files:")
        print(f"  üìÑ spacing.css: {len(browser_css):,} chars (modern browsers)")
        print(f"  üìÑ spacing_print.css: {len(weasyprint_css):,} chars (WeasyPrint)")
        print(f"  üìÑ spacing.legacy.css: {len(browser_legacy_css):,} chars (old browsers)")
        
        print(f"\nüéØ Next Steps:")
        print(f"1. Add <link> tags to load spacing.css after preview.css")
        print(f"2. Use feature flag to enable/disable enhanced spacing")
        print(f"3. Test visual changes are now visible")
        print(f"4. Browser dev tools should show @layer spacing rules winning")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error building spacing CSS: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 